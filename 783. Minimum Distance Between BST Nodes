// time complexity is o(n) and space complexity is O(N)
class Solution {
    public void inOrder(TreeNode root, List<Integer> al){
        if(root == null)return;
        inOrder(root.left, al);
        al.add(root.val);
        inOrder(root.right, al);
    }
    public int minDiffInBST(TreeNode root) {
        if(root == null)return 0;
        List<Integer> al = new ArrayList<>();
        inOrder(root, al);
        int max = Integer.MAX_VALUE;
        for(int i = 1; i < al.size(); i++){
            max = Math.min(max, al.get(i) - al.get(i - 1));
        }
        return max;
    }
}

//timecomplexity is o(n) and space complexity is only stack space;

class Solution {
    int max = Integer.MAX_VALUE;
    TreeNode prev = null;
    public void inOrder(TreeNode root){
        if(root == null)return;
        inOrder(root.left);
        if(prev != null){
            max = Math.min(max, Math.abs(root.val - prev.val));
        }
        prev = root;
        inOrder(root.right);
    }
    public int minDiffInBST(TreeNode root) {
        if(root == null)return 0;
        inOrder(root);
        return max;
    }
}
