class Solution {
    class Pair implements Comparable<Pair>{
        int value;
        int freq;
        Pair(int value, int freq){
            this.value = value;
            this.freq = freq;
        }
        public int compareTo(Pair o){
            return o.freq - this.freq;
        }
    }
    HashMap<Integer, Integer> map = new HashMap();
    public int[] findAns(HashMap<Integer, Integer> map){
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        for(int key : map.keySet())pq.add(new Pair(key, map.get(key)));
        Pair cur = pq.remove();
        List<Integer> ans = new ArrayList<>();
        ans.add(cur.value);
        while(pq.size() > 0){
            Pair rpair = pq.remove();
            if(rpair.freq == cur.freq)ans.add(rpair.value);
            else break;
        }
        int[] res = new int[ans.size()];
        for(int i = 0; i < ans.size(); i++)res[i] = ans.get(i);
        return res;
    }
    public void dfs(TreeNode root, HashMap<Integer, Integer> map){
        if(root == null)return;
        map.put(root.val, map.getOrDefault(root.val, 0) + 1);
        dfs(root.left, map);
        dfs(root.right, map);
    }
    public int[] findMode(TreeNode root) {
       HashMap<Integer, Integer> map = new HashMap<>();
       dfs(root, map); 
       return findAns(map);
    }
}
