class Solution {
    int[] nodeCount;
    public List<List<Integer>> constructGraph(int n, int[][] edges){
        List<List<Integer>> graph = new ArrayList<>();
        for(int i = 0; i < n; i++){
            graph.add(new ArrayList<>());
        }
        for(int[] edge : edges){
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        return graph;
    }
    public boolean countNodes(int curNode, int parent, int dest, List<List<Integer>> graph){
        if(curNode == dest){
            nodeCount[curNode]++;
            return true;
        }
        for(int nbr : graph.get(curNode)){
            if(nbr != parent){
                if(countNodes(nbr, curNode, dest, graph)){
                    nodeCount[curNode]++;
                    return true;
                }
            }
        }
        return false;
    }
    Integer[][] dp;
    // byDefault parentTaken is 0 because till now we are not taking the parent if we take the parent it should be 1
    public int memo(int curNode, int parent, int parentTaken, List<List<Integer>> graph, int[] price){
        if(dp[curNode][parentTaken] != null)return dp[curNode][parentTaken];
        if(graph.get(curNode).size() == 1){
            if(parentTaken == 1){
                // if we satisfy this condition that means we already have taken the parent
                dp[curNode][parentTaken] = nodeCount[curNode] * price[curNode];
            }else{
                // if we are here that means till now we have not taken the parent
                dp[curNode][parentTaken] = nodeCount[curNode] * (price[curNode] / 2);
            }
        }
        if(parentTaken == 1){
            int ans = 0;
            for(int nbr : graph.get(curNode)){
                if(nbr != parent){
                    ans += memo(nbr, curNode, 0, graph, price);
                }
            }
            ans += nodeCount[curNode] * price[curNode];
            return dp[curNode][parentTaken] = ans;
        }
        int ans1 = 0, ans2 = 0;
        for(int nbr : graph.get(curNode)){
            if(nbr != parent){
                ans1 += memo(nbr, curNode, 0, graph, price);
                ans2 += memo(nbr, curNode, 1, graph, price);
            }
        }
        ans1 += nodeCount[curNode] * price[curNode];
        ans2 +=  nodeCount[curNode] * (price[curNode] / 2);
        return dp[curNode][parentTaken] = Math.min(ans1, ans2);
    }
    public int minimumTotalPrice(int n, int[][] edges, int[] price, int[][] trips) {
        List<List<Integer>> graph = constructGraph(n, edges);
        nodeCount = new int[n];
        for(int[] trip : trips){
            countNodes(trip[0], -1, trip[1], graph);
        }
        for(int i = 0; i < n; i++){
            System.out.print(nodeCount[i]+" ");
        }
        dp = new Integer[n][2];
        return memo(0, -1, 0, graph, price);
    }
}
