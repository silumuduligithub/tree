
class Solution {
    public void helper(Node root, List<Integer> al){
        if(root == null)return;
        for(Node child : root.children){
            helper(child, al);
        }
        al.add(root.val);
    }
     public List<Integer> iterativeDfs(Node root){
        List<Integer> ans = new ArrayList<>();
        if(root == null)return ans;
        Stack<Node> st = new Stack<>();
        st.push(root);
        while(st.size() > 0){
            Node cur = st.pop();
            ans.add(cur.val);
            for(int i = 0; i < cur.children.size(); i++){
                st.push(cur.children.get(i));
            }
        }
        Collections.reverse(ans);
        return ans;
    }
    public List<Integer> postorder(Node root) {
        // List<Integer> ans = new ArrayList<>();
        // if(root == null)return ans;
        // helper(root, ans);
        // return ans; 
         return iterativeDfs(root);       
   }
}
