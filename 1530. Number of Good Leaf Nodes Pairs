class Solution {
    int count = 0;
    public List<Integer> helper(TreeNode root, int distance){
        if(root == null){
            List<Integer> al = new ArrayList<>();
            al.add(0);
            return al;
        }
        if(root.left == null && root.right == null){
            List<Integer> al = new ArrayList<>();
            al.add(1);
            return al;
        }
        List<Integer> left = helper(root.left, distance);
        List<Integer> right = helper(root.right, distance);
        for(int l : left){
            for(int r : right){
                if(l > 0 && r > 0){
                    if((l + r) <= distance){
                        count++;
                    }
                }
            }
        }
        List<Integer> ans = new ArrayList<>();
        for(int l : left){
            if(l > 0){
                ans.add(l + 1);
            }
        }
        for(int r : right){
            if(r > 0){
                ans.add(r + 1);
            }
        }
        return ans;
    }
    public int countPairs(TreeNode root, int distance) {
        helper(root, distance);
        return count;
    }
}
