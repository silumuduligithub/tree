class Solution {
    int res = 0;
    public List<List<Integer>> buildGraph(int n, int[][] edges){
        List<List<Integer>> graph = new ArrayList<>();
        for(int i = 0; i < n; i++)graph.add(new ArrayList<>());
        for(int[] edge : edges){
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        return graph;
    }
    public int dfs(int cur, List<List<Integer>> graph, List<Boolean> apples, boolean[] vis, int count){
       if(vis[cur])return 0;
       vis[cur] = true;
       int cost = 0;
       for(int nbr : graph.get(cur)){
           if(!vis[nbr]){
               cost += dfs(nbr, graph, apples, vis,  2);
           }
       }
       if(cost == 0 && apples.get(cur) == false){
           return 0;
       }
       return cost + count;
    }
    public int minTime(int n, int[][] edges, List<Boolean> hasApple) {
        List<List<Integer>> graph = buildGraph(n, edges);
        return dfs(0, graph,hasApple, new boolean[n], 0);
    }
}
