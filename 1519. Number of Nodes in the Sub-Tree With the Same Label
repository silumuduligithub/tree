class Solution {
    int[] ans;
    int[] map;
    public List<List<Integer>> buildGraph(int[][] edges, int n){
        List<List<Integer>> graph = new ArrayList<>();
        for(int i = 0; i < n; i++)graph.add(new ArrayList<>());
        for(int[] edge : edges){
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        return graph;
    }
    public void dfs(List<List<Integer>> graph, int cur, int parent, String labels){
        int prev = map[labels.charAt(cur) - 'a'];
        map[labels.charAt(cur) - 'a']++;
        for(int nbr : graph.get(cur)){
            if(nbr != parent){
                dfs(graph, nbr, cur, labels);
            }
        }
        ans[cur] = map[labels.charAt(cur) -'a'] - prev;
    }
    public int[] countSubTrees(int n, int[][] edges, String labels) {
        List<List<Integer>> graph = buildGraph(edges, n);
        ans = new int[n];
        map = new int[26];
        dfs(graph, 0, -1, labels);
        return ans;
    }
}
