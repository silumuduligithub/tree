class Solution {
    public int findDepth(TreeNode root){
        if(root == null)return 0;
        int left = findDepth(root.left);
        int right = findDepth(root.right);
        return Math.max(left, right) + 1;
    }
    public TreeNode LCA(TreeNode root, int cur, int depth){
        if(root == null)return null;
        if(cur == depth)return root;
        TreeNode left = LCA(root.left, cur + 1, depth);
        TreeNode right = LCA(root.right, cur + 1, depth);
        if(left != null && right != null)return root;
        else if(left != null)return left;
        else if(right != null)return right;
        else return null;
    }
    public TreeNode lcaDeepestLeaves(TreeNode root) {
        if(root == null || root.left == null && root.right == null)return root;
        int depth = findDepth(root);
        return LCA(root, 0, depth - 1);
    }
}
