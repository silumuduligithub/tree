class Solution {
    public List<List<Integer>> constructGraph(int[][] roads){
        List<List<Integer>> graph = new ArrayList<>();
        for(int i = 0; i < roads.length + 1; i++){
            graph.add(new ArrayList<>());
        }
        for(int [] road : roads){
            graph.get(road[0]).add(road[1]);
            graph.get(road[1]).add(road[0]);
        }
        return graph;
    }
    long fuel = 0;
    public long dfs(int root, int parent, List<List<Integer>>graph, int seats){
        int people = 1;
        for(int nbr : graph.get(root)){
            if(nbr != parent){
                people += dfs(nbr, root, graph, seats);
            }
        }
        if(root != 0)
            fuel += (long)Math.ceil(people/(double)seats);
        return people;
    }
    public long minimumFuelCost(int[][] roads, int seats) {
        List<List<Integer>> graph = constructGraph(roads);
        dfs(0, -1, graph, seats);
        return fuel;
    }
}
