class Solution{
    public List<List<String>> printTree(TreeNode root) {
        List<List<String>> res = new LinkedList<>();
        int height = getHeight(root);
        int rows = height, columns = (int)Math.pow(2, height) - 1;
        List<String> row = new ArrayList<>();
        for(int i = 0; i < columns; i++)  row.add("");
        for(int i = 0; i < rows; i++)  res.add(new ArrayList<>(row));
        populateRes(root, res, 0, 0, columns - 1);
        return res;
    }

    public void populateRes(TreeNode root, List<List<String>> res, int row, int i, int j) {
        if (root == null) return;
        int mid = (i + j)/ 2;
        res.get(row).set(mid, Integer.toString(root.val));
        populateRes(root.left, res, row+1, i, mid - 1);
        populateRes(root.right, res, row+1, mid + 1, j);
    }

    public int getHeight(TreeNode root) {
        if (root == null) return 0;
        int left = getHeight(root.left);
        int right = getHeight(root.right);
        return Math.max(left, right) + 1;
    }
}
