class Solution {
    class Pair{
        TreeNode node;
        int state;
        Pair(TreeNode  node, int state){
            this.node = node;
            this.state = state;
        }
    }
    public int iterativeDfs(Stack<Pair> st, int k){
        while(st.size() > 0){
            Pair top = st.peek();
            if(top.state == 1){
                top.state++;
                if(top.node.left != null){
                    st.push(new Pair(top.node.left, 1));
                }
            }else if(top.state == 2){
                if(k == 1)return top.node.val;
                k--;
                top.state++;
                if(top.node.right != null){
                    st.push(new Pair(top.node.right, 1));
                }
            }else{
                st.pop();
            }
        }
        System.out.println(al);
        return 0;
    }
    public int kthSmallest(TreeNode root, int k) {
        Stack<Pair> st = new Stack<>();
        st.push(new Pair(root, 1));
        return iterativeDfs(st, k);
    }
}
