class Solution {
    public List<List<Integer>> buildGraph(int[][] edges){
        List<List<Integer>> graph = new ArrayList<>();
        for(int i = 0; i <= edges.length; i++)graph.add(new ArrayList<>());
        for(int[] edge : edges){
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        return graph;
    }
    public void makeParent(List<List<Integer>> graph, int cur, int[] parent){
        for(int nbr : graph.get(cur)){
            if(parent[nbr] == -1 ){
                parent[nbr] = cur;
                makeParent(graph, nbr, parent);
            }
        }
    }
    int dist = 0;
    public void calculetDistance(int[] parent, int cur){
        if(parent[cur] == -1)return;
        dist++;
        calculetDistance(parent, parent[cur]);
    }
    public int dfs(List<List<Integer>> graph, int cur, int parent, int[] amount){
        int subAns = Integer.MIN_VALUE;
        for(int nbr : graph.get(cur)){
            if(nbr != parent)
                subAns = Math.max(subAns, dfs(graph, nbr, cur, amount));
        }
       return subAns == Integer.MIN_VALUE ? amount[cur] : subAns + amount[cur];
    }
    public int mostProfitablePath(int[][] edges, int bob, int[] amount) {
        List<List<Integer>> graph = buildGraph(edges);
        int[] parent = new int[amount.length];
        Arrays.fill(parent, -1);
        makeParent(graph, 0, parent);
        parent[0] = -1;
        calculetDistance(parent, bob);
        System.out.println(dist);
        int rank = dist;
        int minimumDist = dist / 2;
        while(bob != 0){
            if(dist > minimumDist){
                amount[bob] = 0;
            }else if(dist == minimumDist && (rank & 1) == 0){
                amount[bob] /= 2;
            }
            bob = parent[bob];
            dist--;
        }
        return dfs(graph, 0, -1, amount);
    }
}
