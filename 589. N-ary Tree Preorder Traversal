
class Solution {
     public void dfs(Node root, List<Integer> al){
        if(root == null)return;
        al.add(root.val);
        for(Node child : root.children){
            dfs(child, al);
        }
    }
    public List<Integer> iterativeDfs(Node root){
        List<Integer> ans = new ArrayList<>();
        if(root == null)return ans;
        Stack<Node> st = new Stack<>();
        st.push(root);
        while(st.size() > 0){
            Node cur = st.pop();
            ans.add(cur.val);
            for(int i = cur.children.size() - 1; i >= 0; i--){
                st.push(cur.children.get(i));
            }
        }
        return ans;
    }
    public List<Integer> preorder(Node root) {
        // List<Integer> ans = new ArrayList<>();
        // if(root == null)return ans;
        // dfs(root, ans);
        return iterativeDfs(root);
        // return ans;       
    }
}
